<pipp>
<title>Usability</title>
<desc>What considerations affect how usable a framework is, for a production deployment?</desc>
<body>

<h2>Introduction</h2>

<p>A framework must enable development of applications ready for high-load, mission-critical deployments. The framework itself must be robust, and it must help applications developed using the framework to keep this robustness. The main components of this are:</p>

<ul>
<li>Stability</li>
<li>Security</li>
<li>Performance</li>
<li>Deployment options</li>
</ul>

<h2>Documentation</h2>

<p>Docs &amp; community - long term support</p>

<ul>
<li>"How to" documentation - there need to be walk though documents for achieving most common tasks. This should start with basic "how to develop your first app" tutorials, which will need great detail. More advanced how-to documents can be terser is style.</li>
<li>Reference documentation - on the whole, autogenerated API docs can serve this need, provided the API is cleanly designed. There also needs to be an overview document, and overviews for the more complicated APIs.</li>
</ul>


<h2>Stability</h2>

<p>Being able to confidently deploy an application into a live environment is critical. Some of the main considerations are:</p>

<ul>
<li>Reliability - the framework needs to cope with all corner-cases encountered in day to day operations, such as the database being restarted. This relies on the framework being well tested, both with unit tests and deployments.</li>
<li>The framework should promote reliability in application code, e.g. encouraging design patterns that avoid race conditions.</li>
<li>Release quality - changes in the framework between releases need to be well managed to minimise incompatibilities.</li>
<li>Community (or paid) support is available in case of problems, and will remain available long term.</li>
</ul>

<h2>Security</h2>

<p>The framework itself must not contain security vulnerabilities, such as <a href="http://secunia.com/advisories/28354/">directory traversal</a>. Where the framework implements security-significant features, such as authentication, these must have all appropriate precautions (such as lockouts) available, and enabled by default.</p>

<p>Moreover, the framework must encourage secure coding. Use of an ORM and XML-based templates makes SQL injection and cross-site scripting vulnerabilities much less likely. The forms library needs to help prevent cross-site request forgery (CSRF) attacks, and similarly the JSON support must help prevent JavaScript hijacking attacks. The framework should also help prevent authorization flaws, such as parameter tampering attacks.</p>


<h2>Performance</h2>

<p>There are a variety of requirements around performance. Comparison figures often focus on the raw server performance, but this is only part of the picture. Some of the major factors influencing performance:</p>

<ul>
<li>Cacheing</li>
<li>Bandwidth reduction - e.g. JavaScript optimisation, gzip filter</li>
<li>Scalability - Ability to take advantage of multiple CPUs and run on multiple systems. In general, as long as all intra-request state is stored in the database, all frameworks can scale well in this manner.</li>
<li>Optimising use of the database</li>
<li>Raw speed - how many CPU cycles it takes to service a request</li>
</ul>


<h2>Deployment Options</h2>

<p>Applications must be deployable on a range of operating systems, web servers and databases. Having full Windows support, including IIS and SQL Server, is a definite advantage. Ideally, there should be a single, prefered deployment option for each platform, although some use cases (such as high performance) may require a different approach. There are three main styles of deployment:</p>

<ul>
<li>Integrated with a web server. WSGI is extremely helpful here - as long as the framework presents as a WSGI application, this will be possible for any server that has a WSGI interface.</li>
<li>Running standalone. Frameworks should have a reasonable web server included, including SSL support, so this is a viable option. There will always be benefits to using a real web server, e.g. fast serving of static files, DOS protection. When an application runs standalone, it needs to integrate with OS management, e.g. becoming a service on Windows.</li>
<li>Reverse proxy. Gives some benefits of both standalone and integrated, but has challenges as well. If the web server does authentication, the details need to be communicated to the standalone application.</li>
</ul>


</body>
</pipp>
