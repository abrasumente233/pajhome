<pipp>
<title>Documentation</title>
<desc>Full user documentation explaining how to develop a web site with Pipp.</desc>
<status>unfinished</status>
<body>

<h2>Introduction</h2>

<p>A Pipp site starts as source code, which is a directory of .pip files and supporting files, such as images. Running Pipp builds the source into static HTML for deployment to a web server. The web server does not need to have Pipp installed. For convenience during development, Pipp also has a built-in web server that performs on-demand building.</p>

<p>.pip files are very similar to HTML files, but have extra tags that are processed by Pipp. The build process involves applying an XSLT stylesheet to each .pip file. The stylesheet is tailored to each individual website, and based on a standard template included with Pipp. Pipp provides a number of XSLT extension functions to be called from the template; these assist with common web development tasks. Pipp also provides the framework for calling the XSLT transforms as needed.</p>

<h2><a name="install">Manual Installation</a></h2>

<p><b>Note:</b> If you're using Windows, it is easier to use the <a noimg="1" href="http://pipp.googlecode.com/files/pipp-2.0.2.exe">Pipp Windows Installer</a>. Manual installation is required on other platforms, and if you want to use the development version, or modify the Pipp source code.</p>

<p>The following dependencies are required:</p>

<ul>
<li><a href="http://www.python.org/download/">Python</a></li>
<li><a href="http://sourceforge.net/project/showfiles.php?group_id=39954">4Suite</a></li>
<li><a href="http://www.pythonware.com/products/pil/">Python Imaging Library</a></li>
<li><a href="http://pygments.org/download/">Pygments</a></li>
<li><a href="http://www.wxpython.org/download.php">wxPython</a> (only needed for the Windows tool tray app)</li>
</ul>

<p>Installation procedure:</p>

<ol>
<li>Download <a noimg="1" href="http://pipp.googlecode.com/files/pipp-2.0.2.tar.gz">Pipp Source Code</a></li>
<li>Extract the archive into a suitable directory</li>
<li>Add the directory to your path</li>
</ol>

<p>To check this worked, at a command prompt or shell window, type "pipp.py -?". This should produce a help screen describing the command line options.</p>

<p>To launch example site...</p>

<ol>
<li>Go into the directory and type "pipp.py -s ."</li>
<li>Browse to http://127.0.0.1:8080/</li>
</ol>


<h3>Development Version</h3>

<p>You can get a checkout of the latest development version from the Subversion repository at Google Code:</p>

<p class="indented"><code>svn checkout http://pipp.googlecode.com/svn/trunk/ pipp</code></p>

<p>Be aware that this may not be as stable as the release version.</p>


<h2>Directory Layout</h2>

<p>The directory for a Pipp site always has the following:</p>

<ul>
<li><code>index.pip</code> - the front page</li>
<li><code>pipp.xsl</code> - the stylesheet used to transform .pip files to .html files</li>
<li><code>pipp.xml</code> - this is generated by Pipp and contains information on all the pages in the site</li>
<li><code>out</code> - a directory created by Pipp, that contains the generated web site</li>
</ul>

<p>Within .pip files, relative and absolute paths can be used. Absolute paths start from the project root directory; it is not possible to reference files outside this. This is deliberate, to encourage self-contained source code. If necessary, you can use symbolic links to work around this restriction.</p>


<h2>.pip Files</h2>

<p>A simple .pip file looks like:</p>

<pre>&lt;pipp&gt;
    &lt;title&gt;My Page&lt;/title&gt;
    &lt;style&gt;blue-white&lt;/style&gt;
    ...
    &lt;body&gt;
        This is my content
        ...
    &lt;/body&gt;
&lt;/pipp&gt;</pre>

<p>TBD: explain exports and body</p>

<p>Inside the body, the following tags will be processed by Pipp, in addition to any specific rules the site stylesheet: TBD - explain these (link to XSLT API?)</p>

<ul>
<li>pipp-child @src</li>
<li>pipp-file @src</li>
<li>pipp-child-file @src @title</li>
<li>pipp-code @src</li>
<li>pipp-map-view @src</li>
<li>pipp-img @src ...</li>
<li>pipp-thumb @src @width/@height ...</li>
</ul>

<p>It was decided to avoid requiring XML namespaces in .pip files. This avoids including a namespace definition in every .pip file.</p>


<h2>Exported Variables</h2>

A page can export any variables it likes.
    If "link" is not explicitly exported, Pipp automatically exports the absolute path to the output HTML file.
    In general, all pages will export "title".



<h2>Site Stylesheet</h2>

Two things:
    Your page template
    Any rewrites you want, e.g. graphical h1

Don't start from scratch - use either minimal_pipp.xsl or copy a more detailed example.



<h2>pipp.xml Format</h2>

<pre>&lt;page src="/mypage.pip"&gt;
    &lt;exports&gt;
        &lt;myvariable&gt;my value&lt;/myvariable&gt;
        ...
    &lt;/exports&gt;
    &lt;depends&gt;
        &lt;depend&gt;/pipp.xsl&lt;/depend&gt;
        ...
    &lt;/depends&gt;
    &lt;edepends&gt;
        &lt;depend&gt;/index.pip:title&lt;/depend&gt;
        ...
    &lt;/edepends&gt;
    &lt;children&gt;
        &lt;page&gt;
        ...
        &lt;.page&gt;
        ...
    &lt;/children&gt;
&lt;/page&gt;</pre>


<h2>Command Line</h2>

<pre>Usage: pipp.py [options] project_root

Options:
  -h, --help            show this help message and exit
  -s, --serve           Start a web server that publishes the project; this is
                        useful for development
  -p PORT, --port=PORT  Specify port for the web server (default 8080)
  -l LISTEN, --listen=LISTEN
                        Specify the listening address for the web server
                        (default 127.0.0.1)
  -f, --full            Initiate a full rebuild of the project
  -v, --verbose         Produce more verbose output</pre>


<h2>Tooltray App</h2>




<h2><a name="xslt">XSLT API</a></h2>

<dl>
<dt>pipp:child(file_name)</dt>
<dd>Include the file in the website; it will appear in the site hierarchy as a child of the current file. The file must be valid XML as it will be parsed as a .pip file.</dd>

<dt>pipp:child-file(file_name, title)</dt>
<dd>Copy the file from in-root to out-root. This is similar to pipp:file, however the file will be included in the site hierarchy as a child of the current file. This is the usual way to include download packages in the website.</dd>

<dt>pipp:code(file_name, code, lexer, docss)</dt>
<dd>Include a syntax-highlighted source code file in the HTML output. The highlighting is done by <a href="http://pygments.org/">Pygments</a>. You can specify either the name of a file to use, or a string. The "lexer" parameter specifies the pygments lexer to use; this must be specified for inline blocks. For files, if not specified, it is determined automatically using the file extension. If "docss" is set to "1", a CSS file with the pygments default colours is automatically generated. If you do not specify docss, you need to include your own CSS rules.</dd>

<dt>pipp:export(name, value)</dt>
<dd>Add a variable to the current file's export table. Other files will be able to access this variable using pipp:import, pipp:import-join or pipp:map-view. Multiple variables with the same name are permitted but not recommended. It is very common to export the file's title, so site maps and navigation bars can be created.</dd>

<dt>pipp:export-depend(path, name)</dt>
<dd>Marks the current file as dependent on a variable exported from another file. This needs to be called appropriately in XSLT templates used by map-view, for dependencies to work correctly. It doesn't need to be called from the main stylesheet; pipp:import and pipp:import-join mark the dependency automatically.</dd>

<dt>pipp:file(file_name)</dt>
<dd>Copy the file from in-root to out-root. The file will not appear in the site hierarchy. This is the usual way to include images or other binary files in the website. file_name can be a directory, which is copied in full, including all files and subdirectories.</dd>

<dt>pipp:file-name()</dt>
<dd>Return the absolute path to the current output file.</dd>

<dt>pipp:file-time(time_format)</dt>
<dd>Return the modification date and time of the current input file. The time_format parameter must be a format string suitible for passing to the Python time.strftime function.</dd>

<dt>pipp:gtitle(font, height, texture, bgcolor, text)</dt>
<dd>Generate an image containing styled text. The font is a path to a .ttf file, the height is is pixels and the texture is a path to a image file. The bgcolor should be set to roughly the colour of the background the image will appear on; this is necessary to make anti-aliasing work correctly.</dd>

<dt>pipp:image-width(file_name)</dt>
<dd>Return the width of the image, in pixels. The formats supported are those supported for reading by the <a href="http://www.pythonware.com/products/pil/">Python Imaging Library</a>.</dd>

<dt>pipp:image-height(file_name)</dt>
<dd>Return the height of the image, in pixels. The formats supported are those supported for reading by the <a href="http://www.pythonware.com/products/pil/">Python Imaging Library</a>.</dd>

<dt>pipp:import(name)</dt>
<dd>Retrieve a variable from the current file's export table. If it is not defined in the current file, search up the site hierachy. If none of the ancestors define the variable then raise an error. This is useful for controling properties that are usually passed from parent to child, such as CSS stylesheet names.</dd>

<dt>pipp:import-join(name, separator)</dt>
<dd>Retrieve a variable from the current file and its ancestors' export table. All the variable values are joined into a single string using the separator, with the value from the root file appearing first. This is useful for constructing a long title string, which informs the used of their position in the hierarchy.</dd>

<dt>pipp:map-view(xslt_file)</dt>
<dd>Generate a customised view of the page hierarchy. This is useful for automatically generating navigation bars, site maps, contents pages and more. The specified stylesheet is applied to <code>pipp.xml</code> and the output is included in the current document. For partial builds to work correctly, the stylesheet must explictly register dependencies, by calling pipp:export-depend.</dd>

<dt>pipp:relative-path(file_name)</dt>
<dd>Return a relative path to the file. This is usually only useful with absolute file names as relative file name are return unchanged. Using relative paths makes reorganising the website much easier compared to absolute paths.</dd>

<dt>pipp:thumbnail(file_name, width, height)</dt>
<dd>Generate a thumbnail of the image with the specified size. The function returns the file name of the generate image. If the original image is called xxx.yyy the thumbnail will be called xxx_thumb.yyy. The formats supported are those supported for writing by the <a href="http://www.pythonware.com/products/pil/">Python Imaging Library</a>. You may specify width or height explicitly, or pass one value as zero. If you only specify one dimension, the other will be calculated to preserve the aspect ratio of the original image.</dd>
</dl>


</body>
</pipp>
