<pipp>
<title>Instructions</title>
<desc>How to use the scripts to calculate hashes.</desc>
<body>

<p><b>Note:</b> If you want to use JavaScript hashing to protect passwords, read <a href="auth.html">these instructions</a>.</p>

<h2>Quick instructions</h2>

<p>First download the appropriate files from the links above. Save them in the same directory as your html file and insert a tag like:</p>

<pipp-code lexer="html">
&lt;script type="text/javascript" src="md5.js"&gt;&lt;/script&gt;
</pipp-code>

<p>When you want to calculate a hash, use:</p>

<pipp-code lexer="html">
&lt;script type="text/javascript"&gt;
    hash = hex_md5("input string");
&lt;/script&gt;
</pipp-code>

<p>or md4/sha1 appropriately. These functions return the hash in hexadecimal. The library can also generate <a href="http://www.ietf.org/rfc/rfc2104.txt">HMACs</a> for all three algorithms.</p>

<h2>Loading the libraries</h2>

<p>First download the appropriate files from the links on the <a href="index.html">main page</a>. Save them in the same directory as your html file and insert the appropriate one of these tags:</p>

<pipp-code lexer="html">&lt;script type="text/javascript" src="md4.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="md5.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="sha1.js"&gt;&lt;/script&gt;
</pipp-code>

<p>The scripts don't interfere with each other - you can use them all in the same document.</p>

<p>Alternatively, you can copy the code and paste it straight into your html file, inside &lt;script&gt;...&lt;/script&gt;. I personally prefer keeping the code separate, but inlining it is slightly faster.</p>

<h2>Calculating a hash</h2>

<p>Usually you'll want to get the result in hexadecimal, so it can be submitted as part of a form without worrying about URL encoding.</p>

<pipp-code lexer="html">&lt;script type="text/javascript"&gt;
    hash = hex_md4("input string");
    hash = hex_md5("input string");
    hash = hex_sha1("input string");
&lt;/script&gt;</pipp-code>

<p>Note that the input must be a string - hex_md5(Math.random()) will not funcation correctly; you must do hex_md5(Math.random().toString()).</p>

<p>You can also get the result in base-64 encoding:</p>

<pipp-code lexer="html">&lt;script type="text/javascript"&gt;
    hash = b64_md4("input string");
    hash = b64_md5("input string");
    hash = b64_sha1("input string");
&lt;/script&gt;</pipp-code>

<p>You can also get the result as a binary string; this is discussed below.</p>

<h2>HMACs - keyed hashes</h2>

<p>In many uses of hashes you end up wanting to combine a key with some data. It isn't so bad to do this by simple concatonation, but HMAC is a carefully designed method, known to be very secure. The usage is:</p>

<pipp-code lexer="html">&lt;script type="text/javascript"&gt;
    hash = hex_hmac_md4("key", "data");
    hash = hex_hmac_md5("key", "data");
    hash = hex_hmac_sha1("key", "data");
&lt;/script&gt;</pipp-code>

<p>The HMAC result is also available base-64 encoded or as a binary string, using b64_hmac_* or str_hmac_*.</p>

<h2>Configurable options</h2>

<p>There are a few configurable variables; you may have to tweak these to be compatible with the hash function on the server.</p>

<table class="indent">
  <tr><th>hexcase</th><td>The case of the letters A-F in hexadecimal output</td><td>0 - lower case (default)<br/>1 - upper case</td></tr>
  <tr><th>b64pad</th><td>The character used to pad base-64 output to a multiple of 3 bytes</td><td>"" - no padding (default)<br/>"=" - for strict RFC compliance</td></tr>
  <tr><th>chrsz</th><td>Whether string input should be treated as ASCII or UniCode</td><td>8 - ASCII (default)<br/>16 - UniCode</td></tr>
</table>

<p>To set a variable, use a syntax like this:</p>

<pipp-code lexer="html">&lt;script type="text/javascript" src="md5.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    chrsz = 16;
&lt;/script&gt;</pipp-code>

<p>In general, it's ok to change the values of these variables between calls to the library; for example you can do ASCII and UniCode hashes on the same page. However, you can't change chrsz and then re-use data returned by a str_* function.</p>

<h2>Binary string output</h2>

<p>This representation is useful when you want to feed the result of a hash operation back into another operation. The ability to do this lets you create a variety of cryptographic protocols.</p>

<p>For example, to do a double hash:</p>

<pipp-code lexer="js">
double_hash = hex_md5(str_md5(data));
</pipp-code>

<p>The string is encoded so each character of a string represents either one or two bytes, in ASCII and UniCode respectively. This would be troublesome to send over HTTP as form data, but JavaScript strings are completely binary safe.</p>

</body>
</pipp>
