<pipp>
<title>Instructions</title>
<desc>How to use the scripts to calculate hashes.</desc>
<body>

<p><b>Note:</b> If you want to use JavaScript hashing to protect passwords, read <a href="auth.html">these instructions</a>.</p>

<h2>2.1 Instructions</h2>

<h3>Loading the libraries</h3>

<p>First download the <a href="jshash-2.1.zip">bundle</a>. Copy the .js file into the same directory as your html file, and insert a tag like:</p>

<pipp-code lexer="html">&lt;script type="text/javascript" src="md5.js"&gt;&lt;/script&gt;
</pipp-code>

<p>The scripts don't interfere with each other - you can use them all in the same document.</p>

<p>Alternatively, you can copy the code and paste it straight into your html file, inside a script tag. I tend to keep the code separate, but including it will load faster.</p>

<h3>Calculating a hash</h3>

<p>Usually you'll want to get the result in hexadecimal, so it can be submitted as part of a form without worrying about URL encoding.</p>

<pipp-code lexer="html">&lt;script type="text/javascript"&gt;
    hash = hex_md5("input string");
&lt;/script&gt;</pipp-code>

<p>Note that the input must be a string - hex_md5(Math.random()) will not function correctly; you must do hex_md5(Math.random().toString()).</p>

<p>You can also get the result in base-64 encoding:</p>

<pipp-code lexer="html">&lt;script type="text/javascript"&gt;
    hash = b64_md5("input string");
&lt;/script&gt;</pipp-code>

<p>You can also get the result as a binary string; this is discussed below.</p>

<h3>HMAC - keyed hashes</h3>

<p>In many uses of hashes you end up wanting to combine a key with some data. It isn't so bad to do this by simple concatenation, but HMAC is specifically designed for this use. The usage is:</p>

<pipp-code lexer="html">&lt;script type="text/javascript"&gt;
    hash = hex_hmac_md5("key", "data");
&lt;/script&gt;</pipp-code>

<p>The HMAC result is also available base-64 encoded or as a binary string, using b64_hmac_* or str_hmac_*.</p>

<p>Some other hash libraries have the arguments the other way round. If the JavaScript HMAC doesn't match the value your server library generates, try swapping the order.</p>

<h3>Configurable options</h3>

<p>There are a few configurable variables; you may have to tweak these to be compatible with the hash function on the server.</p>

<table class="indent">
  <tr><th>hexcase</th><td>The case of the letters A-F in hexadecimal output</td><td>0 - lower case (default)<br/>1 - upper case</td></tr>
  <tr><th>b64pad</th><td>The character used to pad base-64 output to a multiple of 3 bytes</td><td>"" - no padding (default)<br/>"=" - for strict RFC compliance</td></tr>
  <tr><th>chrsz</th><td>Whether string input should be treated as ASCII or Unicode.</td><td>8 - ASCII (default)<br/>16 - Unicode</td></tr>
</table>

<p>The Unicode support uses utf-16 encoding, which is rarely what people want. Version 2.2 has better Unicode support, with utf-8 encoding.</p>

<p>To set a variable, use a syntax like this:</p>

<pipp-code lexer="html">&lt;script type="text/javascript" src="md5.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    chrsz = 16;
&lt;/script&gt;</pipp-code>

<p>In general, it's ok to change the values of these variables between calls to the library; for example you can do ASCII and Unicode hashes on the same page. However, you can't change chrsz and then re-use data returned by a str_* function.</p>

<h3>Binary string output</h3>

<p>This representation is useful when you want to feed the result of a hash operation back into another operation. The ability to do this lets you create a variety of cryptographic protocols.</p>

<p>For example, to do a double hash:</p>

<pipp-code lexer="js">
double_hash = hex_md5(str_md5(data));
</pipp-code>

<p>The string is encoded so each character of a string represents either one or two bytes, in ASCII and Unicode respectively. This would be troublesome to send over HTTP as form data, but JavaScript strings are completely binary safe.</p>

<h2>2.2-Beta Instructions</h2>

<p>(Under construction)</p>

<h3>Common Usage</h3>

<p>First download the <a href="jshash-2.2-beta.zip">bundle</a>. For common use, I recommend using the minified scripts, which have been processed by the YUI Compressor. Note that these only support utf-8 input and hex output. Use it like this:</p>

<pipp-code lexer="html">&lt;script type="text/javascript" src="md5-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    hash = hex_md5("string");
    hmac = hex_hmac_md5("key", "data");
&lt;/script&gt;</pipp-code>

<h3>Other Output Encodings</h3>

any output encoding

<h3>TBD</h3>

how to use rstr_md5 and utf-16

<h3>Unit Tests</h3>

running tests


</body>
</pipp>
