<pipp>
<title>Instructions</title>
<desc>How to use the scripts to calculate hashes.</desc>
<body class="hashinstructions">

<p><b>Note:</b> If you want to use JavaScript hashing to protect passwords, read <a href="auth.html">these instructions</a>.</p>

<h2>Instructions</h2>

<h3>Common Usage</h3>

<p>First download the <a href="jshash-2.2.zip">bundle</a>. For common use, I recommend using the minified scripts, which have been processed by the YUI Compressor. Note that these only support utf-8 input and hex output. Use it like this:</p>

<pipp-code lexer="html">&lt;script type="text/javascript" src="md5-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    hash = hex_md5("string");
    hmac = hex_hmac_md5("key", "data");
&lt;/script&gt;</pipp-code>

<p>The usage for other hashes is essentially the same - sha1, sha256, sha512 or rmd160.</p>

<h3>Other Output Encodings</h3>

<p>The scripts support base64 encoding, although you must use the full script, not the minified version. If necessary, you can create you own minified script, with the functionality you need. Use it like this:</p>

<pipp-code lexer="html">&lt;script type="text/javascript" src="md5.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    hash = b64_md5("string");
    hmac = b64_hmac_md5("key", "data");
&lt;/script&gt;</pipp-code>

<p>There is also a mode called "any output encoding". This lets you specify a string of characters, and all those characters will be used to encode the password. The string can be any length - it does not need to be a power of 2. This is useful for applications like password generation, when you want to get as much unpredictability as possible into a short password. Use it like this:</p>

<pipp-code lexer="html">&lt;script type="text/javascript" src="md5.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    hash = any_md5("string", "encoding");
&lt;/script&gt;</pipp-code>

<p>If the encoding is <code>0123456789ABCDEF</code> the output will be identical to <code>hex_md5</code>. It isn't possible to create output that's identical to base64 encoding.</p>

<h3>Advanced Usage</h3>

<p>If you want to use more advanced features, such as multiple repetitions of a hash, or utf-16 encoding, you need to use a slightly lower-level interface to the scripts. These have the concept of a "raw string"; this is a JavaScript string, but all the characters are between 0 and 255 - essentially a binary array. To get a hex hash, using utf-16 encoding:</p>

<pipp-code lexer="html">&lt;script type="text/javascript" src="md5.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    hash = rstr2hex(rstr_md5(str2rstr_utf16le("string")));
&lt;/script&gt;</pipp-code>

<p>You can also use <code>str2rstr_utf16be</code>. To perform a double hash:</p>

<pipp-code lexer="html">&lt;script type="text/javascript" src="md5.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    hash = rstr2hex(rstr_md5(rstr_md5(str2rstr_utf8("string"))));
&lt;/script&gt;</pipp-code>

<p>You can use variants of this to produce just about any hash you may need.</p>

<h3>Unit Tests</h3>

<p>To run the unit tests, you will need Python 2.5 or newer. The script <code>test.py</code> generates an HTML file that runs the tests:</p>

<pipp-code lexer="bash">python test.py > test.html</pipp-code>

<p>Next, open <code>test.html</code> in a browser to run the tests, and see the results. If you want to test the minified versions of the scripts, use <code>test-min.py</code>.</p>


<h2>Instructions for Old Version 2.1</h2>

<h3>Loading the libraries</h3>

<p>First download the <a href="jshash-2.1.zip">bundle</a>. Copy the .js file into the same directory as your html file, and insert a tag like:</p>

<pipp-code lexer="html">&lt;script type="text/javascript" src="md5.js"&gt;&lt;/script&gt;
</pipp-code>

<p>The scripts don't interfere with each other - you can use them all in the same document.</p>

<p>Alternatively, you can copy the code and paste it straight into your html file, inside a script tag. I tend to keep the code separate, but including it will load faster.</p>

<h3>Calculating a hash</h3>

<p>Usually you'll want to get the result in hexadecimal, so it can be submitted as part of a form without worrying about URL encoding.</p>

<pipp-code lexer="html">&lt;script type="text/javascript"&gt;
    hash = hex_md5("input string");
&lt;/script&gt;</pipp-code>

<p>Note that the input must be a string - hex_md5(Math.random()) will not function correctly; you must do hex_md5(Math.random().toString()).</p>

<p>You can also get the result in base-64 encoding:</p>

<pipp-code lexer="html">&lt;script type="text/javascript"&gt;
    hash = b64_md5("input string");
&lt;/script&gt;</pipp-code>

<p>You can also get the result as a binary string; this is discussed below.</p>

<h3>HMAC - keyed hashes</h3>

<p>In many uses of hashes you end up wanting to combine a key with some data. It isn't so bad to do this by simple concatenation, but HMAC is specifically designed for this use. The usage is:</p>

<pipp-code lexer="html">&lt;script type="text/javascript"&gt;
    hash = hex_hmac_md5("key", "data");
&lt;/script&gt;</pipp-code>

<p>The HMAC result is also available base-64 encoded or as a binary string, using b64_hmac_* or str_hmac_*.</p>

<p>Some other hash libraries have the arguments the other way round. If the JavaScript HMAC doesn't match the value your server library generates, try swapping the order.</p>

<h3>Configurable options</h3>

<p>There are a few configurable variables; you may have to tweak these to be compatible with the hash function on the server.</p>

<table class="indent">
  <tr><th>hexcase</th><td>The case of the letters A-F in hexadecimal output</td><td>0 - lower case (default)<br/>1 - upper case</td></tr>
  <tr><th>b64pad</th><td>The character used to pad base-64 output to a multiple of 3 bytes</td><td>"" - no padding (default)<br/>"=" - for strict RFC compliance</td></tr>
  <tr><th>chrsz</th><td>Whether string input should be treated as ASCII or Unicode.</td><td>8 - ASCII (default)<br/>16 - Unicode</td></tr>
</table>

<p>The Unicode support uses utf-16 encoding, which is rarely what people want. Version 2.2 has better Unicode support, with utf-8 encoding.</p>

<p>To set a variable, use a syntax like this:</p>

<pipp-code lexer="html">&lt;script type="text/javascript" src="md5.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
    chrsz = 16;
&lt;/script&gt;</pipp-code>

<p>In general, it's ok to change the values of these variables between calls to the library; for example you can do ASCII and Unicode hashes on the same page. However, you can't change chrsz and then re-use data returned by a str_* function.</p>

<h3>Binary string output</h3>

<p>This representation is useful when you want to feed the result of a hash operation back into another operation. The ability to do this lets you create a variety of cryptographic protocols.</p>

<p>For example, to do a double hash:</p>

<pipp-code lexer="js">
double_hash = hex_md5(str_md5(data));
</pipp-code>

<p>The string is encoded so each character of a string represents either one or two bytes, in ASCII and Unicode respectively. This would be troublesome to send over HTTP as form data, but JavaScript strings are completely binary safe.</p>

</body>
</pipp>
