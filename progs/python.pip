<pipp>
<title>Python</title>
<desc>A quick run down of my favourite Python libraries.</desc>
<spell>no</spell>
<body>

<p>I like <a href="http://www.python.org/">Python</a> because it's fun to program in. The syntax is intuitive and easy to read; a lot of people describe it as "clean". There are enough libraries available to get you going quickly with all sorts of tasks. It works well for both simple scripts and complex programs, and advanced programming techniques are possible, such as meta-programming. I've found it to be very stable and reliable; I have yet to see the interpreter crash with an internal error. There are concerns with performance and memory consumption, but I've always found it to work fine, even for bulk data tasks.</p>

<p>If you want to learn Python, start with the tutorial on python.org. After that, you really need a project to work on, to focus your direction. As you try to code your project, you'll work through all sorts of wacky solutions to problems, gradually figuring out good ways to do things. Also, reading other people's code is a great way to pick up new tricks.</p>

<p>The standard library takes care of many things. There are language services such as threads, dates and regular expressions. Moreover, there are modules to help with common tasks, such as talking HTTP and SSL, working with CSV files and formatting text. And beyond this there are third-party libraries for a great range of tasks. Here are some of my favorites.</p>

<table>
<tr><th><a href="http://www.wxpython.org/">wxPython</a></th><td>wxPython is a windowing toolkit. It lets you create native look-and-feel Windows, Mac and Linux GUI applications. It supports a wide range of features, and offers the programmer a lot of control. A rudimentary RAD system is available with XRCed. The syntax is reasonably in line with other Python code, although another library called <a href="http://dabodev.com/">Dabo</a> is available, which sits on top of wxPython and aims to make the syntax more "Pythonic".</td></tr>
<tr><th><a href="http://sourceforge.net/projects/pywin32/">PyWin32</a></th><td>This collection of libraries gives you access to Windows-specific functions. One of the most powerful components is win32com that gives you full access to COM. You can use this to do all sorts of tasks, including access data in Microsoft Office documents.</td></tr>
<tr><th><a href="http://www.rutherfurd.net/python/sendkeys/">SendKeys</a></th><td>SendKeys lets you send fake key strokes to Windows programs. I've used it to automate calling programs that don't have a command line interface, e.g. to generate PGP self-decrypting archives.</td></tr>
<tr><th><a href="http://www.py2exe.org/">py2exe</a></th><td>py2exe packages up a Python program as a stand-alone .exe that can run on a computer that doesn't have Python installed. It's worked very reliably for me, and a program comes out at around 3 Megabytes. Also, <a href="http://www.jrsoftware.org/isinfo.php">InnoSetup</a> is a free solution to create distributable Windows installers.</td></tr>
<tr><th><a href="http://www.turbogears.org/">TurboGears</a></th><td>TurboGears is described as a "full stack web application mega framework". Combining a whole bundle of libraries it uses itself, it offers a very productive and powerful web app development environment. I've found solutions for almost all my programming needs in this space.</td></tr>
<tr><th><a href="http://www.sqlite.org/">SQLite</a></th><td>SQLite lets you have a mini SQL database embedded in your program. I find this greatly preferable to other peristance techniques, such as pickle and shelve. It doesn't require any database program to be running on the computer, it just does the work inside your program and stores data in a file. The support for SQL features is very good, and it supports basic multi-user locking. sqlite itself isn't Python-specific; <a href="http://oss.itsystementwicklung.de/trac/pysqlite/wiki/pysqlite">PySQLite</a> is the Python library, and it is built-in with Python 2.5.</td></tr>
<tr><th><a href="http://www.sqlalchemy.org/">SQLAlchemy</a></th><td>SQLAlchemy is an <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">Object-Relational Mapper</a> (ORM) - a convenient way to access SQL databases from Python. It does have something of a steep learning curve, but once mastered it's much better than writing lots of SQL queries. There is support for the most common databases; an appropriate DBAPI module is required for each.</td></tr>
<tr><th><a href="http://pyodbc.sourceforge.net/">pyODBC</a></th><td>This module lets you access ODBC through the Python DBAPI. It is used by SQLAlchemy for Microsoft SQL Server support. I also use it directly to use Access databases, which SQLAlchemy doesn't support.</td></tr>
<tr><th><a href="http://kid-templating.org/">Kid</a></th><td>Kid is an XML templating language. It supports variable substitution, loops, conditional sections and reusable blocks, as well as more advanced features. I find this by far the best way for programs to generate HTML output; I'll never go back to embeddeding HTML fragments in my code. Another library called <a href="http://genshi.edgewall.org/">Genshi</a> is now popular, which is seen as a superior replacement to Kid.</td></tr>
<tr><th><a href="http://cheetahtemplate.org/">Cheetah</a></th><td>Cheetah is a generic templating language. It is similar in some ways to Kid, but is not XML specific. Cheetah is somewhat more mature than Kid, and much more performant. However, I find the Kid language slightly preferable, so I only use Cheetah when generating non-XML output.</td></tr>
<tr><th><a href="http://www.pythonware.com/products/pil/">Python Imaging Library</a></th><td>The Python Imaging Library (PIL) is a powerful set of graphics functions. It supports conversion between many bitmap formats, manipulations such as resizing and filters and also generating graphics. It's notable that the manipulations work at high quality - it uses good algorithms.</td></tr>
<tr><th><a href="http://ploticus.sourceforge.net/doc/welcome.html">Ploticus</a></th><td>Ploticus is a graphing toolkit. It lets you code scripts that can generate graphs from dynamic data. The scripting language takes some getting used to, but it is very flexible and will do a lot of work for you. Ploticus isn't python-specific; in fact the only Python interface is running ploticus using os.system.</td></tr>
<tr><th><a href="http://www.aaronsw.com/2002/xmltramp/">xmltramp</a></th><td>xmltramp offers a simple interface to parse and create XML documents. The interface works well with Python; the code looks nice. It doesn't have all the power of traditional XML interfaces such as DOM, but it works for 99% of my needs. There is a similar library called <a href="http://effbot.org/zone/element-index.htm">ElementTree</a> that is built-in with Python 2.5.</td></tr>
<tr><th><a href="http://4suite.org/index.xhtml">4Suite</a></th><td>4Suite is a fully functional XML toolkit for Python. It allows tight integration with Python programs. It is possible for Python code to call the XSLT processor, and for XSLT functions to be defined that call Python functions. On the downside, the interface is significantly more compilcated than xmltramp.</td></tr>
<tr><th><a href="http://sandbox.rulemaker.net/ngps/m2/">m2crypto</a></th><td>Python has basic SSL support built-in. However, it doesn't do certificate validation. In other words, when you connect to a server, the server could be an imposter, and despite the encryption you wouldn't know. m2crypto is the easiest way I found to do SSL with certificate validation.</td></tr>
<tr><th><a href="http://www.dlitz.net/software/pycrypto/">Python Cryptography Toolkit</a></th><td>This gives you low-level access to all sorts of cryptographic functions. In general I recommend against doing this - it's too easy to make mistakes. Most programs should use a high-level library like m2crypto instead. However, this has been great for validating my JavaScript implementations of hash functions.</td></tr>
<tr><th><a href="http://www.secdev.org/projects/scapy/">scapy</a></th><td>scapy is a library for decoding and crafting network packets. It gives you complete control over packets, while making common manipulations simple. I find it invaluable as a "tool of last resort" when doing low-level network investigation. I tend to use scapy interactively, not from scripts.</td></tr>
<tr><th><a href="http://oss.coresecurity.com/projects/pcapy.html">pcapy</a></th><td>pcapy lets you capture network packets, just like <a href="http://www.tcpdump.org/">tcpdump</a>. It works great for writing tools like network scanners in Python.</td></tr>
<tr><th><a href="http://oss.coresecurity.com/projects/impacket.html">impacket</a></th><td>Impacket is another packet library, in a similar vein to scapy. The syntax is a bit more explicit that scapy and there's less "magic", so I prefer Impacket for packet crafting in scripts.</td></tr>
<tr><th></th><td></td></tr>
</table>

<p>I hope you found this page useful. If you know of any other cool libraries that deserve a place here, please <a href="mailto:paj@pajhome.org.uk">let me know</a>.</p>

<h3>wxPython Tips</h3>

<ul>
<li>Create the dialogs as XML resources, using XRCed.</li>
<li>If you have written your own customized controls, have them as "Unknown" in the XML, and attach them later using AttatchUnknownControl.</li>
<li>If you do any blocking calls, its best to use threads, as otherwise you'll block things repaint messages and the app will appear to have crashed.</li>
<li>Use the py2exe -w option to make a Windows .exe that doesn't create a DOS box.</li>
<li>Create an exception handler that logs to a file. This will greatly aid debugging if problems are reported.</li>
</ul>

</body>
</pipp>
